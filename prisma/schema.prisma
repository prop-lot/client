generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Community {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json      @default("{ \"pfp\": \"\" }")
  uname       String    @unique // lowercase identifier which should match the subdomain for a community
  ideas       Idea[]
}

model Proposal {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  title                 String    @db.VarChar(50)
  description           String    @db.VarChar(1080)
  createdBy             User      @relation(fields: [creatorId], references: [wallet])
  creatorId             String
  deleted               Boolean   @default(value: false)
  ideaId                Int
  idea                  Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  requests              OnChainRequest[]
}

// not sure if we want or need this right now
model Collection {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  title                 String    @db.VarChar(50)
  ideas                 Idea[]
  createdBy             User      @relation(fields: [creatorId], references: [wallet])
  creatorId             String
  deleted               Boolean   @default(value: false)
}


model OnChainRequest {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  contractAddress       String
  function              String
  args                  String
  value                 Int?
  proposalId            Int
  proposal              Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}


model Idea {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  title                 String    @db.VarChar(50)
  tldr                  String    @db.VarChar(240)
  description           String    @db.VarChar(1080)
  tokenSupplyOnCreate   Int?      @default(value: 0) // token supply at time of Idea creation.
  createdAtBlock        Int       @default(0)
  legacyLockedScore     Int       @default(0) // legacy score from old system
  deleted               Boolean   @default(value: false)
  createdBy             User      @relation(fields: [creatorId], references: [wallet])
  creatorId             String
  community             Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId           Int
  comments              Comment[]
  votes                 Vote[]
  tags                  Tag[]
  proposals             Proposal[]
  collections           Collection[]
}

model User {
  id                Int       @id @default(autoincrement())
  wallet            String    @unique
  ens               String?
  legacyTokenCount  Int       @default(0)
  ideas             Idea[]
  votes             Vote[]
  comments          Comment[]
  collections       Collection[]
  proposals         Proposal[]
}

// how do we want to keep track of edits?

// direction
// +1 for up
// -1 for down
// sum of direction = total score
model Vote {
  id          Int       @id @default(autoincrement())
  direction   Int
  idea        Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      Int
  voter       User      @relation(fields: [voterId], references: [wallet])
  voterId     String
  voterWeight Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([ideaId, voterId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  body        String
  idea        Idea      @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId      Int
  author      User      @relation(fields: [authorId], references: [wallet])
  authorId    String
  replies     Comment[] @relation("Comment_Children")
  parent      Comment?  @relation("Comment_Children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(value: false)
}

model Tag {
  id     Int @id @default(autoincrement())
  type   TagType @unique
  label  String
  Ideas  Idea[]
}

enum TagType {
  SUGGESTION
  GOVERNANCE
  COMMUNITY
  REQUEST
  NOUNS
  OTHER
}